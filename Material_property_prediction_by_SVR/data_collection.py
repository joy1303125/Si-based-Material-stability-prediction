# -*- coding: utf-8 -*-
"""data_collection_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1BAAX6etghGSgKaxuPz6VZa3U4FYV7Ce5
"""

!pip install matminer

import numpy as np
import pandas as pd
import pymatgen
from pymatgen.ext.matproj import MPRester

import numpy as np
import pandas as pd
import pymatgen
from pymatgen.ext.matproj import MPRester


# Si-Na based alloy data and their associated property calling

# In[3]:


with MPRester("mv0hJgupKqxOTd9c") as mpr:
    alkali_metals = ['Li']
    criteria={"elements":{"$in":alkali_metals, "$all": ["Si"]}, "nelements":2}
    properties=['material_id', 'pretty_formula','energy_per_atom','structure','e_above_hull','band_gap','formation_energy_per_atom','crystal_system','energy']
    shortLi=(mpr.query(criteria, properties))


# In[2]:


dfLi=pd.DataFrame(shortLi)


# In[3]:




dfLi["Category_label"] = np.nan
dfLi['Category_label'] = dfLi['Category_label'].replace(np.nan, 1)
dfLi["Class_name"] = "Li_based"


# In[4]:




from matminer.featurizers.structure import DensityFeatures
density=DensityFeatures()
DensityFeatures_Li=density.featurize_dataframe(dfLi,"structure")
DensityFeatures_Li


# In[5]:


from matminer.featurizers.structure import XRDPowderPattern
XRDPowder= XRDPowderPattern()
XRDPowderPattern_Li= XRDPowder.featurize_dataframe(DensityFeatures_Li,"structure")
XRDPowderPattern_Li


# # Na-Si Based Data Collection

# In[6]:


# In[3]:


with MPRester("mv0hJgupKqxOTd9c") as mpr:
    alkali_metals = ['Na']
    criteria={"elements":{"$in":alkali_metals, "$all": ["Si"]}, "nelements":2}
    properties=['material_id', 'pretty_formula','energy_per_atom','structure','e_above_hull','band_gap','formation_energy_per_atom','crystal_system','energy']
    shortNa=(mpr.query(criteria, properties))


# In[7]:



dfNa=pd.DataFrame(shortNa)
dfNa["Category_label"] = np.nan
dfNa['Category_label'] = dfNa['Category_label'].replace(np.nan, 2)
dfNa["Class_name"] = "Nabased"
dfNa


# In[8]:



from matminer.featurizers.structure import DensityFeatures
density=DensityFeatures()
DensityFeatures_Na=density.featurize_dataframe(dfNa,"structure")
DensityFeatures_Na.head(3)


# In[ ]:


from matminer.featurizers.structure import XRDPowderPattern
XRDPowder= XRDPowderPattern()
XRDPowderPattern_Na= XRDPowder.featurize_dataframe(DensityFeatures_Na,"structure")
XRDPowderPattern_Na.head(3)


# In[26]:


XRDPowderPattern_Na


# # K-Si Based Data Collection

# In[9]:


# In[3]:



with MPRester("mv0hJgupKqxOTd9c") as mpr:
    alkali_metals = ['K']
    criteria={"elements":{"$in":alkali_metals, "$all": ["Si"]}, "nelements":2}
    properties=['material_id', 'pretty_formula','energy_per_atom','structure','e_above_hull','band_gap','formation_energy_per_atom','crystal_system','energy']
    shortK=(mpr.query(criteria, properties))

# In[ ]:


dfK=pd.DataFrame(shortK)
dfK["Category_label"] = np.nan
dfK['Category_label'] = dfK['Category_label'].replace(np.nan, 3)
dfK["Class_name"] = "Kbased"
dfK


# In[10]:



from matminer.featurizers.structure import DensityFeatures
density=DensityFeatures()
DensityFeatures_K=density.featurize_dataframe(dfK,"structure")
DensityFeatures_K.head(3)


# In[ ]:


from matminer.featurizers.structure import XRDPowderPattern
XRDPowder= XRDPowderPattern()
XRDPowderPattern_K= XRDPowder.featurize_dataframe(DensityFeatures_K,"structure")
XRDPowderPattern_K.head(3)


# # Mg-Si Based Data Collection

# In[11]:



with MPRester("mv0hJgupKqxOTd9c") as mpr:
    alkali_metals = ['Mg']
    criteria={"elements":{"$in":alkali_metals, "$all": ["Si"]}, "nelements":2}
    properties=['material_id', 'pretty_formula','energy_per_atom','structure','e_above_hull','band_gap','formation_energy_per_atom','crystal_system','energy']
    shortMg=(mpr.query(criteria, properties))


# In[ ]:


dfMg=pd.DataFrame(shortMg)
dfMg["Category_label"] = np.nan
dfMg['Category_label'] = dfMg['Category_label'].replace(np.nan, 4)
dfMg["Class_name"] = "Mgbased"
dfMg


# In[54]:



with MPRester("mv0hJgupKqxOTd9c") as mpr:
    alkali_metals = ['Mg']
    criteria={"elements":{"$in":alkali_metals, "$all": ["Si"]}, "nelements":2}
    properties=['material_id', 'pretty_formula','energy_per_atom','structure','e_above_hull','band_gap','formation_energy_per_atom','crystal_system','energy']
    shortMg=(mpr.query(criteria, properties))


# # For Filtered data( Helps to remove the skewness of Si-Mg Baed data)

# In[55]:



# In[73]:


from matminer.featurizers.structure import DensityFeatures
density=DensityFeatures()
DensityFeatures_Mg=density.featurize_dataframe(dfMg,"structure")
DensityFeatures_Mg


# In[74]:


DensityFeatures_Mg


# In[76]:


from matminer.featurizers.structure import XRDPowderPattern
XRDPowder= XRDPowderPattern()
XRDPowderPattern_Mg= XRDPowder.featurize_dataframe(DensityFeatures_Mg,"structure")
XRDPowderPattern_Mg.head(3)


# # Ca-Si Based Data Collection

# In[21]:



with MPRester("mv0hJgupKqxOTd9c") as mpr:
    alkali_metals = ['Ca']
    criteria={"elements":{"$in":alkali_metals, "$all": ["Si"]}, "nelements":2}
    properties=['material_id', 'pretty_formula','energy_per_atom','structure','e_above_hull','band_gap','formation_energy_per_atom','crystal_system','energy']
    shortCa=(mpr.query(criteria, properties))




dfCa=pd.DataFrame(shortCa)
dfCa=pd.DataFrame(shortCa)
dfCa["Category_label"] = np.nan
dfCa['Category_label'] = dfCa['Category_label'].replace(np.nan, 5)
dfCa["Class_name"] = "Cabased"
dfCa


# In[ ]:


from matminer.featurizers.structure import DensityFeatures
density=DensityFeatures()
DensityFeatures_Ca=density.featurize_dataframe(dfCa,"structure")
DensityFeatures_Ca.head(3)


# In[ ]:


from matminer.featurizers.structure import XRDPowderPattern
XRDPowder= XRDPowderPattern()
XRDPowderPattern_Ca= XRDPowder.featurize_dataframe(DensityFeatures_Ca,"structure")
XRDPowderPattern_Ca.head(3)


# # Al-Si Based Data Collection

# In[ ]:

with MPRester("mv0hJgupKqxOTd9c") as mpr:
    alkali_metals = ['Al']
    criteria={"elements":{"$in":alkali_metals, "$all": ["Si"]}, "nelements":2}
    properties=['material_id', 'pretty_formula','energy_per_atom','structure','e_above_hull','band_gap','formation_energy_per_atom','crystal_system','energy']
    shortAl=(mpr.query(criteria, properties))



# In[ ]:


dfAl=pd.DataFrame(shortAl)
dfAl=pd.DataFrame(shortAl)
dfAl["Category_label"] = np.nan
dfAl['Category_label'] = dfAl['Category_label'].replace(np.nan, 7)
dfAl["Class_name"] = "Albased"
dfAl


# In[ ]:


from matminer.featurizers.structure import DensityFeatures
density=DensityFeatures()
DensityFeatures_Al=density.featurize_dataframe(dfAl,"structure")
DensityFeatures_Al.head(3)


# In[ ]:


from matminer.featurizers.structure import XRDPowderPattern
XRDPowder= XRDPowderPattern()
XRDPowderPattern_Al= XRDPowder.featurize_dataframe(DensityFeatures_Al,"structure")
XRDPowderPattern_Al.head(3)


# # Pure Si Based Data Collection

# In[23]:



with MPRester("mv0hJgupKqxOTd9c") as mpr:
    results = mpr.query({'pretty_formula':"Si"}, properties=['material_id', 'pretty_formula','energy_per_atom','structure','e_above_hull','band_gap','formation_energy_per_atom','crystal_system','energy'])
    


# In[ ]:


dfSi=pd.DataFrame( results)
dfSi=pd.DataFrame( results)
dfSi["Category_label"] = np.nan
dfSi['Category_label'] = dfSi['Category_label'].replace(np.nan, 8)
dfSi["Class_name"] = "Sibased"
dfSi


# In[ ]:


from matminer.featurizers.structure import DensityFeatures
density=DensityFeatures()
DensityFeatures_Si=density.featurize_dataframe(dfSi,"structure")
DensityFeatures_Si.head(3)


# In[ ]:


from matminer.featurizers.structure import XRDPowderPattern
XRDPowder= XRDPowderPattern()
XRDPowderPattern_Si= XRDPowder.featurize_dataframe(DensityFeatures_Si,"structure")
XRDPowderPattern_Si.head(3)
 


# In[ ]:





# In[24]:


frames_density = [XRDPowderPattern_Li,XRDPowderPattern_Na,XRDPowderPattern_K,XRDPowderPattern_Mg,XRDPowderPattern_Si,XRDPowderPattern_Ca,XRDPowderPattern_Al]


# In[ ]:


result_density = pd.concat(frames_density,ignore_index = True)


# In[ ]:


result_density.to_csv('Xrd_MP_today.csv')


# In[25]:



result_density


# In[ ]:





# In[25]:



# In[ ]:


result_density = pd.concat(frames_density,ignore_index = True)


# In[ ]:


result_density.to_csv('Xrd_MP.csv')


# In[28]:


result_density


# In[28]:



from matminer.featurizers.structure import SineCoulombMatrix
Sine_Coulomb_Matrix=SineCoulombMatrix(flatten=True)
SineCoulombMatrix_Li= Sine_Coulomb_Matrix.fit_featurize_dataframe(DensityFeatures_Li,"structure")


# In[ ]:


from matminer.featurizers.structure import SineCoulombMatrix
Sine_Coulomb_Matrix=SineCoulombMatrix(flatten=True)
SineCoulombMatrix_Na= Sine_Coulomb_Matrix.fit_featurize_dataframe(DensityFeatures_Na,"structure")
SineCoulombMatrix_Na


# In[ ]:


from matminer.featurizers.structure import SineCoulombMatrix
Sine_Coulomb_Matrix=SineCoulombMatrix(flatten=True)
SineCoulombMatrix_K= Sine_Coulomb_Matrix.fit_featurize_dataframe(DensityFeatures_K,"structure")
SineCoulombMatrix_K


# In[ ]:


from matminer.featurizers.structure import SineCoulombMatrix
Sine_Coulomb_Matrix=SineCoulombMatrix(flatten=True)
SineCoulombMatrix_Mg= Sine_Coulomb_Matrix.fit_featurize_dataframe(DensityFeatures_Mg,"structure")
SineCoulombMatrix_Mg


# In[ ]:


from matminer.featurizers.structure import SineCoulombMatrix
Sine_Coulomb_Matrix=SineCoulombMatrix(flatten=True)
SineCoulombMatrix_Ca= Sine_Coulomb_Matrix.fit_featurize_dataframe(DensityFeatures_Ca,"structure")
SineCoulombMatrix_Ca


# In[ ]:



# In[ ]:


from matminer.featurizers.structure import SineCoulombMatrix
Sine_Coulomb_Matrix=SineCoulombMatrix(flatten=True)
SineCoulombMatrix_Al= Sine_Coulomb_Matrix.fit_featurize_dataframe(DensityFeatures_Al,"structure")
SineCoulombMatrix_Al



from matminer.featurizers.structure import SineCoulombMatrix
Sine_Coulomb_Matrix=SineCoulombMatrix(flatten=True)
SineCoulombMatrix_Si= Sine_Coulomb_Matrix.fit_featurize_dataframe(DensityFeatures_Si,"structure")
DensityFeatures_Si


# In[44]:


frames_density = [SineCoulombMatrix_Li,SineCoulombMatrix_Na,SineCoulombMatrix_K,SineCoulombMatrix_Mg,SineCoulombMatrix_Ca,DensityFeatures_Si,SineCoulombMatrix_Al]
frames_density 


# In[45]:


result_density_sine = pd.concat(frames_density,ignore_index = True)


# In[ ]:


result_density_sine.to_csv('Sine_MP.csv')


# In[46]:


result_density_sine


# In[48]:


result_density_sine = result_density_sine.fillna(0)


# In[49]:


result_density_sine.to_csv('Sine_MP.csv')


# In[47]:


from matminer.featurizers.structure import OrbitalFieldMatrix
OrbitalFieldMatrix=OrbitalFieldMatrix(flatten=True)
OrbitalFieldMatrix_Li= OrbitalFieldMatrix.fit_featurize_dataframe(DensityFeatures_Li,"structure")


# In[ ]:


from matminer.featurizers.structure import OrbitalFieldMatrix
OrbitalFieldMatrix=OrbitalFieldMatrix(flatten=True)
OrbitalFieldMatrix_Na= OrbitalFieldMatrix.fit_featurize_dataframe(DensityFeatures_Na,"structure")


# In[ ]:


from matminer.featurizers.structure import OrbitalFieldMatrix
OrbitalFieldMatrix=OrbitalFieldMatrix(flatten=True)
OrbitalFieldMatrix_Mg= OrbitalFieldMatrix.fit_featurize_dataframe(DensityFeatures_Mg,"structure")


# In[ ]:


from matminer.featurizers.structure import OrbitalFieldMatrix
OrbitalFieldMatrix=OrbitalFieldMatrix(flatten=True)
OrbitalFieldMatrix_Ca= OrbitalFieldMatrix.fit_featurize_dataframe(DensityFeatures_Ca,"structure")


# In[ ]:


from matminer.featurizers.structure import OrbitalFieldMatrix
OrbitalFieldMatrix=OrbitalFieldMatrix(flatten=True)
OrbitalFieldMatrix_K= OrbitalFieldMatrix.fit_featurize_dataframe(DensityFeatures_K,"structure")



# In[ ]:


from matminer.featurizers.structure import OrbitalFieldMatrix
OrbitalFieldMatrix=OrbitalFieldMatrix(flatten=True)
OrbitalFieldMatrix_Al= OrbitalFieldMatrix.fit_featurize_dataframe(DensityFeatures_Al,"structure")




from matminer.featurizers.structure import OrbitalFieldMatrix
OrbitalFieldMatrix=OrbitalFieldMatrix(flatten=True)
OrbitalFieldMatrix_Si= OrbitalFieldMatrix.fit_featurize_dataframe(DensityFeatures_Si,"structure")


# In[52]:


frames_density = [OrbitalFieldMatrix_Li,OrbitalFieldMatrix_Na,OrbitalFieldMatrix_K,OrbitalFieldMatrix_Mg,OrbitalFieldMatrix_Ca,OrbitalFieldMatrix_Si,OrbitalFieldMatrix_Al]
frames_density 


# In[53]:


result_density_orbital = pd.concat(frames_density,ignore_index = True)


# In[ ]:


result_density_orbital.to_csv('orbital_MP.csv')